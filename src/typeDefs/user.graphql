enum Gender {
	UNKNOWN
	MALE
	FEMALE
}
type User {
  _id: ID!
  email: String
	firstname: String
	lastname: String
	username: String
  password: String
	resetPasswordToken: String
	resetPasswordExpires: Float
  createdAt: Float
  updatedAt: Float
	isLocked: Boolean
	isVerified: Boolean
  isActive: Boolean
}
input UpdateUserInput {
	username: String!
	password: String!
	firstname: String!
	lastname: String!
	email: String!
}
input LoginUserInput {
  username: String!
  password: String!
}

input CreateUserInput {
	firstname: String!
	lastname: String!
	username: String!
	email: String!
	password: String!
	
}

type LoginReponse {
  accessToken: String!
}

type LoginResponse {
	accessToken: String!
	refreshToken: String!
}

type Query {
  hello: String!
  login: LoginReponse!
  users: [User!]
	today: Date @date
	user(_id: ID!): User
}
type RefreshTokenResponse {
	accessToken: String!
}
type Mutation {
	refreshToken(refreshToken: String!): RefreshTokenResponse
  createUser(
		input: CreateUserInput! @validate(schema: "createUserRegister")
	): Boolean
  updateUser(
		_id: ID!
		input: UpdateUserInput! @validate(schema: "updateUserRegister")
	): Boolean
  deleteUser(_id: ID!): Boolean
	verifyEmail(emailToken: String!): Boolean
  login(
		input: LoginUserInput! @validate(schema: "loginUserRegister")
	): LoginResponse
	# changePassword(
	# 	_id: ID!
	# 	currentPassword: String!
	# 	password: String!
	# ): Boolean
	changePassword(
		username: String!
		password: String!
	): Boolean
	forgotPassword(email: String!): Boolean
	resetPassword(resetPasswordToken: String!, password: String!): Boolean
}
